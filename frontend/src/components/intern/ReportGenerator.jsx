import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { FileText, Download, Calendar, TrendingUp, Clock, CheckCircle, User, Briefcase } from 'lucide-react';

const ReportGenerator = () => {
  const [reportType, setReportType] = useState('weekly');
  const [dateRange, setDateRange] = useState({
    startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0]
  });
  const [selectedSections, setSelectedSections] = useState([
    'summary', 'tasks', 'performance', 'attendance', 'goals', 'feedback'
  ]);

  const [reportData] = useState({
    summary: {
      totalTasks: 24,
      completedTasks: 18,
      inProgressTasks: 4,
      pendingTasks: 2,
      totalHours: 156,
      averageRating: 4.6,
      goalsAchieved: 3
    },
    tasks: [
      {
        id: 1,
        title: 'Implement User Authentication',
        status: 'completed',
        priority: 'high',
        hours: 12,
        completionDate: '2024-01-20',
        description: 'Successfully implemented JWT-based authentication system'
      },
      {
        id: 2,
        title: 'Design Dashboard UI',
        status: 'completed',
        priority: 'medium',
        hours: 8,
        completionDate: '2024-01-18',
        description: 'Created responsive dashboard interface with modern design'
      },
      {
        id: 3,
        title: 'API Integration',
        status: 'in-progress',
        priority: 'high',
        hours: 6,
        completionDate: null,
        description: 'Integrating third-party APIs for data synchronization'
      }
    ],
    performance: {
      attendance: 95,
      taskCompletionRate: 75,
      codeQualityScore: 4.5,
      collaborationScore: 4.7,
      learningProgress: 85,
      feedbackReceived: 12
    },
    attendance: {
      totalDays: 20,
      presentDays: 19,
      absentDays: 1,
      lateDays: 0,
      averageHours: 7.8,
      totalHours: 156
    },
    goals: [
      {
        title: 'Complete React Advanced Course',
        status: 'completed',
        progress: 100,
        targetDate: '2024-01-25',
        actualCompletion: '2024-01-23'
      },
      {
        title: 'Contribute to Open Source',
        status: 'in-progress',
        progress: 60,
        targetDate: '2024-02-15',
        actualCompletion: null
      }
    ],
    feedback: [
      {
        date: '2024-01-15',
        from: 'Sarah Chen',
        type: 'mentor',
        rating: 5,
        comment: 'Excellent progress on React concepts. Keep up the good work!',
        areas: ['Technical Skills', 'Problem Solving']
      },
      {
        date: '2024-01-10',
        from: 'Mike Rodriguez',
        type: 'peer',
        rating: 4,
        comment: 'Great collaboration on the API integration task.',
        areas: ['Teamwork', 'Communication']
      }
    ]
  });

  const reportTypes = [
    { id: 'daily', label: 'Daily Report', icon: Calendar },
    { id: 'weekly', label: 'Weekly Report', icon: Calendar },
    { id: 'monthly', label: 'Monthly Report', icon: Calendar },
    { id: 'quarterly', label: 'Quarterly Report', icon: TrendingUp }
  ];

  const sections = [
    { id: 'summary', label: 'Executive Summary', icon: Briefcase },
    { id: 'tasks', label: 'Task Completion', icon: CheckCircle },
    { id: 'performance', label: 'Performance Metrics', icon: TrendingUp },
    { id: 'attendance', label: 'Attendance Record', icon: Clock },
    { id: 'goals', label: 'Goals Progress', icon: Target },
    { id: 'feedback', label: 'Feedback Summary', icon: User }
  ];

  const handleGenerateReport = () => {
    // In a real app, this would generate and download the report
    console.log('Generating report:', { reportType, dateRange, selectedSections });
    
    // Simulate report generation
    const reportContent = generateReportContent();
    downloadReport(reportContent);
  };

  const generateReportContent = () => {
    const sectionsContent = selectedSections.map(section => {
      switch (section) {
        case 'summary':
          return generateSummarySection();
        case 'tasks':
          return generateTasksSection();
        case 'performance':
          return generatePerformanceSection();
        case 'attendance':
          return generateAttendanceSection();
        case 'goals':
          return generateGoalsSection();
        case 'feedback':
          return generateFeedbackSection();
        default:
          return '';
      }
    }).join('\n\n');

    return `
INTERN PROGRESS REPORT
Generated: ${new Date().toLocaleDateString()}
Period: ${dateRange.startDate} to ${dateRange.endDate}

${sectionsContent}

Report generated by TMS Intern Dashboard
`;
  };

  const generateSummarySection = () => `
EXECUTIVE SUMMARY
================
Total Tasks Completed: ${reportData.summary.completedTasks}/${reportData.summary.totalTasks}
Total Hours Worked: ${reportData.summary.totalHours} hours
Average Rating: ${reportData.summary.averageRating}/5.0
Goals Achieved: ${reportData.summary.goalsAchieved}
Overall Performance: ${calculateOverallPerformance()}%
`;

  const generateTasksSection = () => `
TASK COMPLETION SUMMARY
======================
${reportData.tasks.map(task => `
- ${task.title}
  Status: ${task.status}
  Priority: ${task.priority}
  Hours: ${task.hours}
  ${task.completionDate ? `Completed: ${task.completionDate}` : 'In Progress'}
  Description: ${task.description}
`).join('\n')}
`;

  const generatePerformanceSection = () => `
PERFORMANCE METRICS
==================
Attendance Rate: ${reportData.performance.attendance}%
Task Completion Rate: ${reportData.performance.taskCompletionRate}%
Code Quality Score: ${reportData.performance.codeQualityScore}/5.0
Collaboration Score: ${reportData.performance.collaborationScore}/5.0
Learning Progress: ${reportData.performance.learningProgress}%
Total Feedback Received: ${reportData.performance.feedbackReceived}
`;

  const generateAttendanceSection = () => `
ATTENDANCE RECORD
===============
Total Working Days: ${reportData.attendance.totalDays}
Present Days: ${reportData.attendance.presentDays}
Absent Days: ${reportData.attendance.absentDays}
Late Days: ${reportData.attendance.lateDays}
Average Daily Hours: ${reportData.attendance.averageHours}
Total Hours Worked: ${reportData.attendance.totalHours}
`;

  const generateGoalsSection = () => `
GOALS PROGRESS
=============
${reportData.goals.map(goal => `
- ${goal.title}
  Status: ${goal.status}
  Progress: ${goal.progress}%
  Target Date: ${goal.targetDate}
  ${goal.actualCompletion ? `Completed: ${goal.actualCompletion}` : ''}
`).join('\n')}
`;

  const generateFeedbackSection = () => `
FEEDBACK SUMMARY
===============
${reportData.feedback.map(fb => `
Date: ${fb.date}
From: ${fb.from} (${fb.type})
Rating: ${fb.rating}/5.0
Comment: ${fb.comment}
Areas: ${fb.areas.join(', ')}
`).join('\n\n')}
`;

  const calculateOverallPerformance = () => {
    const weights = {
      attendance: 0.25,
      completion: 0.30,
      quality: 0.20,
      collaboration: 0.15,
      learning: 0.10
    };

    return Math.round(
      (reportData.performance.attendance * weights.attendance) +
      (reportData.performance.taskCompletionRate * weights.completion) +
      (reportData.performance.codeQualityScore * 20 * weights.quality) +
      (reportData.performance.collaborationScore * 20 * weights.collaboration) +
      (reportData.performance.learningProgress * weights.learning)
    );
  };

  const downloadReport = (content) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `intern-report-${reportType}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleSectionToggle = (sectionId) => {
    setSelectedSections(prev =>
      prev.includes(sectionId)
        ? prev.filter(id => id !== sectionId)
        : [...prev, sectionId]
    );
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="bg-white rounded-xl shadow-lg p-6"
    >
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">Report Generator</h2>
          <p className="text-gray-600 mt-1">Generate comprehensive reports for your internship progress</p>
        </div>
        <FileText className="w-8 h-8 text-blue-600" />
      </div>

      {/* Report Type Selection */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">Report Type</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {reportTypes.map((type) => {
            const Icon = type.icon;
            return (
              <button
                key={type.id}
                onClick={() => setReportType(type.id)}
                className={`flex flex-col items-center p-4 rounded-lg border-2 transition-colors ${
                  reportType === type.id
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <Icon className="w-6 h-6 mb-2" />
                <span className="text-sm font-medium">{type.label}</span>
              </button>
            );
          })}
        </div>
      </div>

      {/* Date Range Selection */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">Date Range</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
            <input
              type="date"
              value={dateRange.startDate}
              onChange={(e) => setDateRange({ ...dateRange, startDate: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
            <input
              type="date"
              value={dateRange.endDate}
              onChange={(e) => setDateRange({ ...dateRange, endDate: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Sections Selection */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">Include Sections</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
          {sections.map((section) => {
            const Icon = section.icon;
            return (
              <label
                key={section.id}
                className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50"
              >
                <input
                  type="checkbox"
                  checked={selectedSections.includes(section.id)}
                  onChange={() => handleSectionToggle(section.id)}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <Icon className="w-5 h-5 text-gray-500" />
                <span className="text-sm font-medium">{section.label}</span>
              </label>
            );
          })}
        </div>
      </div>

      {/* Preview Section */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">Report Preview</h3>
        <div className="bg-gray-50 rounded-lg p-4">
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-center">
            <div>
              <p className="text-2xl font-bold text-blue-600">{reportData.summary.completedTasks}</p>
              <p className="text-sm text-gray-600">Tasks Completed</p>
            </div>
            <div>
              <p className="text-2xl font-bold text-green-600">{reportData.summary.totalHours}</p>
              <p className="text-sm text-gray-600">Hours Worked</p>
            </div>
            <div>
              <p className="text-2xl font-bold text-purple-600">{calculateOverallPerformance()}%</p>
              <p className="text-sm text-gray-600">Overall Performance</p>
            </div>
          </div>
        </div>
      </div>

      {/* Generate Button */}
      <div className="flex justify-center">
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={handleGenerateReport}
          className="flex items-center px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
        >
          <Download className="w-5 h-5 mr-2" />
          Generate Report
        </motion.button>
      </div>
    </motion.div>
  );
};

export default ReportGenerator;